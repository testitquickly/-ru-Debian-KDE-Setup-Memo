Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-04-06T02:18:53+03:00

@python @console 
--------------------

====== Python ======

В Debian по-умолчанию Python установлен. Они приходит из общего репозитория и со временем обновляется. 

Проверка того, что есть: 

''ls /usr/bin/python*''

		Пример ответа: 
	''/usr/bin/python3  /usr/bin/python3.9''

Значит, можно вызвать один и тот же источник двумя командами:
* ''python3 --version''
* ''python3.9 --version''

Пример ответа в обоих случаях: «//Python 3.9.2».// 
		
		3.9 — это общая версия языка. 
		3.9.2 — конкретная версия интерпретатора.

		В древние времена стандартный вызов Python версии №2 происходил через вызов ''python --version'', но python2 полностью устарел и автоматически не поставляется. И сегодня можно сделать такой файл-ссылку, но это не существенно.

===== Где что находится =====

Файл-симболик линк [[/usr/bin/python3]] ссылается на файл [[/usr/bin/python3.9]], который ссылается на каталог [[/usr/share/python3/]]. Всегда можно поставить что-то куда-то отдельно, но плясать макарену с ручной установкой нет смысла, всё делается автоматически.

===== Установка отдельной версии Python =====

Всегда есть возможность поставить рядом несколько версий Python — иногда это необходимо и обосновано. Далее можно ИЛИ вызывать нужную версию в каждом отдельном случае, ИЛИ даже можно (но не нужно!) переназначать интерпретатор языка глобально, для всей системы.

Можно поставить несколько версий Python и постарее, и посвежее той, что приходит из официального репозитория (на данный момент 3.9.2). Они все потенциально могут вызвать конфликт зависимостей, но это решаемо.

==== Засетапить своё окружение для сборки Python из исходного кода ====

Это кагбэ дальновиднее и независимее всего.

''sudo apt update && sudo apt upgrade && sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget''

==== Скачать нужную версию ====

1. Go to https://www.python.org/ftp/python/ 
2. выбрать нужную версию Python в архиве //tar.xz//, например, 3.8.9

Это можно из консоли в любом месте:

''wget'' [[https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tar.xz|''https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tar.xz'']] ''-P'' [[~/PythonSource|''~/PythonSource'']] ''&& cd'' [[~/PythonSource|''~/PythonSource'']]

==== Распаковать снятый архив ====

''tar -xf Python-3.8.9.tar.xz && cd Python-3.8.9''

==== Выполнить конфгурирование ====

''./configure --enable-optimizations --with-ensurepip=install''

Вторая опция срзу установит PIP.

Побежали «checking for…». Ждём результат creating Makefile.

==== Make ====

''make -j 5''

Тут „5” — количество ядер в процессоре ноутбука, которые будут рады выполнить нашу команду. Выяснить их количество можно заранее командой ’nproc’.

Подождать, пока отгудятся кулеры от нагрузки. Дело может и затянуться, там выполняется некое множество тестов.

==== Собрать версию ====

__Не надо__ использовать стандартный ''make install'', поскольку он перезапишет существующий системный бинарный файл python3. А это может порушить уже установленный софт в системе.

''sudo make altinstall''

==== Переместить каталог Python-3.8.9 в [[/opt/]] ====

Там ему и полагается быть.

''sudo cp -r ~/PythonSource/Python-3.8.9/ /opt/''

Можно удалить каталог [[~/PythonSource.|''~/PythonSource''.]]

==== Назначить переменную для запуска версии Python ====

Это самый разумный способ: действует локально для каждого пользователя и легко изменяется. 

		Для глобальных изменений есть аппа «update-alternatives». Целесообразность её использования очень неоднозначна.

''mcedit ~/.bashrc''

В самом низу файла добавить строку:

''alias python3.8.9='/opt/Python-3.8.9/python'''

		Тонкий момент: переменную //можно// назвать просто «python», но //лучше// называть с цифрами. Сегодня она одна, завтра рядом могут встать четыре версии Python, и система именования переменных по цифрам поможет ориентироваться в этом зоопарке.

Алиас заработает или после полного релогина, или после принудительно ~~взбадривания~~ перечитывания файла ''.bashrc''

''. ~/.bashrc''

==== Проверка результата ====

''python3.8.9 --version''

Ожидаемый ответ: //Python 3.8.9//

''python3 --version''

Ожидаемый ответ: //Python 3.9.2//

В системе установлены одновременно две версии Python. Основное ПО использует системную версию (//3.9.2//). Я же могу указывать, с какой версией запускать мои скрипты. При обновлении системы основная версия Python может измениться, а мой  python3.8.9 не будет затронут.

Если python3.8.9 будет удалён/заменён, система этого не заметит.

===== Как использовать разные версии Python =====

Запуск условного //hello.py// с командой ''print("Goodbye, World!")'' внутри.

* ''python3 hello.py'' 
* ''python3.8.9 hello.py''

===== Установить PIP =====

Это Python package installer. Помогает ставить всякие дополнения в Python так же, как в Debian устанавливается любое ПО — из командной строки с удалённого репозитория.

Раньше команда установки была «''sudo aptitude install pip''». Но пакет был обновлён и заменён, поэтому 

''sudo aptitude install python3-pip''

Проверка:
''pip --version''

Ожидаемый ответ: //pip 20.3.4 from /usr/lib/python3/dist-packages/pip (python 3.9)//

Установка чего-либо:

''python3 pip install Some_Package''

Примечательно, что вызов ''python3-pip --version'' ничего не возвращает. Нет таких пакетов.

==== Как использовать PIP для отдельной версии Python ====

''python3.8.9 -m pip install Some_Package''

How about using **pyenv**? You can switch the version:

'''
$ pyenv install 2.7.X
$ pyenv install 3.5.X
$ pyenv local 2.7.X
$ pyenv global 3.5.X
'''

