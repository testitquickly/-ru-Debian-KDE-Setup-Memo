Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-04-17T14:54:38+03:00

====== Вызов исполняемых файлов через симлинки ======

В Debian, как и везде, можно делать симлинки (ярлыки) на любые файлы и каталоги.

Физически создание симлинка подразумевает, что на диске будет создан новый файл, обращение к которому всего лишь переводит нас дальше, к указанному источнику.

Есть два типа таких ссылок:
1. относительная (soft link, symbolic link, simlink)
2. жёсткая (hard link)

===== Hard link =====

TODO Hardlink/Softlink - переформулировать внятно !!!

В линуксе у одного файла может быть множество имён. 

То же самое другими словами: в линуксе можно назначить несколько имён одному и тому же файлу.

Магия в том, что можно создать триста тысяч хардлинков на какой-нибудь файл, и даже если кто-то удалит исходный файл, этого никто не заметит. It is deleted from disk only when the last name is removed. 

 — это новый файл, со своим уникальным именем и расположением на диске. Но для системы это просто ещё одно название для файла, который где-то на диске уже существует. Выглядит как ярлык к файлу, а на деле — прямое обращение к файлу. Поэтому при удалении хардлинка файл, на который он ссылался, тоже удаляется.

	A soft link (or "symbolic link", or symlink) is an entirely different animal: it is a small special file that contains a pathname. Thus, soft links can point at files on different filesystems (possibly NFS mounted from different machines), and need not point to actually existing files. When accessed (with the open(2) or stat(2) system calls), a reference to a symlink is replaced by the operating system kernel with a reference to the file named by the path name. (However, with rm(1) and unlink(2) the link itself is removed, not the file it points to. There are special system calls lstat(2) and readlink(2) that read the status of a symlink and the filename it points to. For various other system calls there is some uncertainty and variation between operating systems as to whether the operation acts on the symlink itself, or on the file pointed to.) 

By default, ln makes hard links between files; with the -s option, it makes symbolic (or `soft') links.

If only one file is given, it links that file into the current directory, that is, creates a link to that file in the current directory, with name equal to (the last component of) the name of that file. (This is a GNU extension.) Otherwise, if the last argument names an existing directory, ln will create links to each mentioned source file in that directory, with a name equal to (the last component of) the name of that source file. (But see the description of the --no-dereference option below.) Otherwise, if only two files are given, it creates a link named dest to the file source. It is an error if the last argument is not a directory and more than two files are given.

By default, ln does not remove existing files or existing symbolic links. (Thus, it can be used for locking purposes: it will succeed only if dest did not exist already.) But it can be forced to do so with the option -f.

On existing implementations, if it is at all possible to make a hard link to a directory, this may be done by the superuser only. POSIX forbids the system call link(2) and the utility ln to make hard links to directories (but does not forbid hard links to cross filesystem boundaries). 

Симлинк существует как самостоятельный файл. Если файл, на который происходит перенаправление, будет переименован или удалён, то файл-симлинк останется безхозным. Можно безопасно переименовать файл-симлинк, или удалить его, или создать новый.

Хардлинк тоже существует как самостоятельный файл, но если его удалить — будет удалён и файл, на который хардлинк делает перенаправление. 

--------------------
@console @simlink 
